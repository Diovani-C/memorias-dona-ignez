---
import Layout from "../../layouts/Layout.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const posts = await getCollection("images");
  return posts.map((image) => ({
    params: { id: image.id },
    props: { image },
  }));
}

const { image } = Astro.props;

const pageTitle = `Visualizar: `;
---

<Layout title={pageTitle}>
  <a
    id="back-to-gallery-link"
    href="/gallery"
    class="inline-flex items-center gap-2 text-sm font-semibold transition-colors mb-8"
    style="color: var(--color-text);"
    aria-label="Voltar para a galeria"
    data-astro-prefetch
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="20"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="lucide lucide-arrow-left"
    >
      <path d="m12 19-7-7 7-7"></path>
      <path d="M19 12H5"></path>
    </svg>
    Voltar para a galeria
  </a>

  <div
    transition:name={image.id}
    class="max-w-fit p-2 sm:p-4 bg-white rounded-xl drop-shadow-lg mx-auto"
    style="border: 1px solid var(--color-sepia-light);"
  >
    <Image
      id="final-image"
      src={image.data.src}
      alt={image.data.alt}
      class="object-contain w-full max-h-[80dvh] min-w-0 rounded-lg"
    />

    {
      image.data.raw && (
        <Image
          id="raw-image"
          src={image.data.raw}
          alt={image.data.alt + " (Original)"}
          class="object-contain w-full max-h-[80dvh] min-w-0 rounded-lg"
          style="display: none;"
        />
      )
    }
  </div>

  <div
    class="flex items-center justify-center gap-3 mt-8 flex-shrink-0 w-full md:w-auto"
  >
    <a
      href={image.data.src.src}
      download
      class="action-button"
      aria-label="Baixar imagem"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-download"
      >
        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
        <polyline points="7 10 12 15 17 10"></polyline>
        <line x1="12" x2="12" y1="15" y2="3"></line>
      </svg>
      <span class="hidden sm:inline">Baixar</span>
    </a>

    {
      image.data.raw && (
        <button
          id="toggle-raw-btn"
          class="action-button"
          aria-label="Mostrar imagem original"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="lucide lucide-history"
          >
            <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" />
            <path d="M3 3v5h5" />
          </svg>
          <span class="hidden sm:inline">Original</span>
        </button>
      )
    }

    <button
      id="share-btn"
      class="action-button"
      aria-label="Compartilhar imagem"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-share-2"
      >
        <circle cx="18" cy="5" r="3"></circle>
        <circle cx="6" cy="12" r="3"></circle>
        <circle cx="18" cy="19" r="3"></circle>
        <line x1="8.59" x2="15.42" y1="13.51" y2="17.49"></line>
        <line x1="15.41" x2="8.59" y1="6.51" y2="10.49"></line>
      </svg>
      <span class="hidden sm:inline">Compartilhar</span>
    </button>
  </div>
  <!-- Estilos para os botões -->
  <style>
    .action-button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem; /* 8px */
      font-weight: 600;
      padding: 0.75rem 1.5rem; /* 12px 24px */
      border-radius: 0.375rem; /* 6px */
      background-color: var(--color-gold-pale);
      color: var(--color-cream);
      transition: all 0.2s ease-in-out;
      border: 1px solid transparent;
    }
    .action-button:hover {
      opacity: 0.9;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    a[aria-label="Voltar para a galeria"]:hover {
      color: var(--color-gold-pale);
    }
  </style>

  <!-- Script para funcionalidade de compartilhar -->
  <script is:inline define:vars={{ image }}>
    const shareButton = document.getElementById("share-btn");

    if (shareButton) {
      shareButton.addEventListener("click", async () => {
        const shareData = {
          description: image.data.alt,
          url: window.location.href,
        };

        if (navigator.share && navigator.canShare(shareData)) {
          try {
            await navigator.share(shareData);
            console.log("Imagem compartilhada com sucesso!");
          } catch (err) {
            console.error("Erro ao compartilhar:", err);
          }
        } else {
          // Fallback para desktops ou navegadores sem suporte
          try {
            await navigator.clipboard.writeText(window.location.href);
            alert("Link da imagem copiado para a área de transferência!");
          } catch (err) {
            console.error("Falha ao copiar o link:", err);
            alert("Não foi possível copiar o link. Tente manualmente.");
          }
        }
      });
    }
  </script>
</Layout>
<script>
  document.addEventListener("astro:page-load", () => {
    const toggleButton = document.getElementById("toggle-raw-btn");
    const finalImage = document.getElementById("final-image");
    const rawImage = document.getElementById("raw-image");
    const backLink = document.getElementById("back-to-gallery-link");

    // Verifica se todos os elementos necessários existem
    if (toggleButton && finalImage && rawImage) {
      let isShowingRaw = false;

      toggleButton.addEventListener("click", () => {
        isShowingRaw = !isShowingRaw;
        const span = toggleButton.querySelector("span");

        if (isShowingRaw) {
          // Mostra a imagem raw
          finalImage.style.display = "none";
          rawImage.style.display = "block";
          if (span) span.textContent = "Restaurada";
          toggleButton.setAttribute("aria-label", "Mostrar imagem restaurada");
        } else {
          // Mostra a imagem final
          finalImage.style.display = "block";
          rawImage.style.display = "none";
          if (span) span.textContent = "Original";
          toggleButton.setAttribute("aria-label", "Mostrar imagem original");
        }
      });
    }

    if (!backLink) return;

    const savedFilters = sessionStorage.getItem("galleryFilters");
    console.log(savedFilters);

    if (savedFilters) {
      backLink.href = "/gallery" + savedFilters;
    }
  });
</script>
