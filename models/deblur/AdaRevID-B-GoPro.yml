name: Deblurring_AdaRevID-B_UFPNet_Adaptiveloss_ema
model_type: ImageCleanModel
scale: 1
num_gpu: 1 # set num_gpu: 0 for cpu mode
manual_seed: 100

network_g:
  type: AdaRevID
  in_channels: 3
  out_channels: 3
  width: 64 # [64, 128, 256, 512] # [32, 64, 128, 256]
  #  decoder_layers: [1, 1, 1, 1]
  decoder_layers: [1, 1, 1, 1]
  drop_path: 0.
  train_size: [384, 384]
  overlap_size: [32, 32]
  encoder: UFPNet # NAFNet # UFPNet
  #  save_memory: true
  save_memory_decoder: false
  #  use_amp: true # stem_multi # stem_once
  state_dict_pth_encoder: # /home/ubuntu/106-48t/personal_data/mxt/exp_results/ckpt/UFPNet/train_on_GoPro/net_g_latest.pth
  state_dict_pth_decoder: # /home/ubuntu/106-48t/personal_data/mxt/exp_results/ckpt/UFPNet/train_on_GoPro/net_g_latest.pth
  state_dict_pth_classifier: /app/weights/GoPro.pth
  #  baseblock_enc: [ naf ]
  baseblock: [fcnaf, fcnaf, fcnaf, fcnaf] # [naf, fnaf, dcnv3, fdcnv3] Fattn_FreqLC Ffftformer
  # [naf, dcnv3, fnaf, fdcnv3] [naf, naf, naf, naf] [fcnaf, fcnaf, fcnaf, fcnaf] #
  test_only: true # true
  pretrain: true
  dx: e3 # e3 e4 # fd4
  classifier_type: hard_simple # hard_simple # single
  num_classes: 6
  exit_idx: [4, 4, 3, 3, 2, 1]
  # Big: 0.1: [4, 3, 2, 2, 1, 1]  0.05: [4, 4, 3, 3, 2, 1]
  # large: 0.05: [7, 6, 5, 2, 2, 2]
  decoder_idx: 4
  exit_threshold: 0.05
  cal_num_decoders: true
#  return_cls: true
#  save_feature: true
path:
  pretrain_network_g: /app/weights/RevD-B_GoPro.pth
  strict_load_g: true
  resume_state: ~

# validation settings
val:
  window_size: 8
  val_freq: !!float 4e4 # !!float 4e3
  save_img: true
  rgb2bgr: true
  use_image: true
  max_minibatch: 8

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 1e4 # !!float 4e3
  use_tb_logger: true # false # true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
